import React, { useState, useEffect } from 'react';
import { useAuth } from '../../context/AuthContext';
import { BarChart3, Download, Eye, Trash2, FileText, Calendar, Database, Clock, X } from 'lucide-react';

interface Report {
  id: string;
  scan_id: string;
  name: string;
  title: string;
  type: string;
  module: string;
  target: string;
  date: string;
  status: 'completed' | 'generating' | 'failed';
  content: string;
  command?: string;
  is_stored?: boolean;
}

const Reports: React.FC = () => {
  const [reports, setReports] = useState<Report[]>([]);
  const [loading, setLoading] = useState(true);
  const [deleting, setDeleting] = useState<string | null>(null);
  const [selectedReport, setSelectedReport] = useState<Report | null>(null);
  const [showModal, setShowModal] = useState(false);
  const { currentUser } = useAuth();

  useEffect(() => {
    loadReports();
    // eslint-disable-next-line
  }, []);

  const loadReports = async () => {
    setLoading(true);
    try {
      const userId = currentUser?.uid || '';
      const response = await fetch(`http://localhost:8000/api/reports?user_id=${userId}`);
      const data = await response.json();

      const formattedReports = data.reports.map((report: any) => ({
        id: report.id,
        scan_id: report.scan_id,
        name: report.title,
        title: report.title,
        type: report.module,
        module: report.module,
        target: report.target,
        date: report.date,
        status: report.status,
        content: report.content,
        command: report.command,
        is_stored: true // All reports are now stored!
      }));

      setReports(formattedReports);
    } catch (error) {
      console.error('Error loading reports:', error);
    } finally {
      setLoading(false);
    }
  };

  const generateNewReport = () => {
    loadReports();
  };

  const downloadReport = (report: Report) => {
    const reportContent = `ReconLab Security Report
Report: ${report.title}
Module: ${report.module}
Target: ${report.target}
Generated: ${new Date(report.date).toLocaleString()}
Status: ${report.status}
${report.command ? `Command: ${report.command}` : ''}

=== SCAN OUTPUT ===
${report.content}

=== REPORT METADATA ===
Scan ID: ${report.scan_id}
Report ID: ${report.id}
Generated by ReconLab v1.0`;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${report.title.replace(/[^a-zA-Z0-9]/g, '_')}_${Date.now()}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const viewReport = (report: Report) => {
    setSelectedReport(report);
    setShowModal(true);
  };

  const closeModal = () => {
    setShowModal(false);
    setSelectedReport(null);
  };

  const deleteReport = async (reportId: string) => {
    if (!confirm('Are you sure you want to delete this report? This action cannot be undone.')) {
      return;
    }

    setDeleting(reportId);
    try {
      const userId = currentUser?.uid || '';
      const response = await fetch(`http://localhost:8000/api/reports/${reportId}?user_id=${userId}`, {
        method: 'DELETE',
      });

      if (response.ok) {
        setReports(reports.filter(report => report.id !== reportId));
        alert('Report deleted successfully');
      } else {
        const error = await response.json();
        alert(`Failed to delete report: ${error.detail || 'Unknown error'}`);
      }
    } catch (error) {
      console.error('Error deleting report:', error);
      alert('Error deleting report');
    } finally {
      setDeleting(null);
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed':
        return 'text-green-400';
      case 'generating':
        return 'text-yellow-400';
      case 'failed':
        return 'text-red-400';
      default:
        return 'text-gray-400';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'completed':
        return '✓';
      case 'generating':
        return '⏳';
      case 'failed':
        return '✗';
      default:
        return '?';
    }
  };

  const getModuleIcon = (module: string) => {
    switch (module.toLowerCase()) {
      case 'subfinder':
        return '🌐';
      case 'dirsearch':
        return '🔍';
      case 'arjun':
        return '🎯';
      case 'cmseek':
        return '🛡️';
      case 'wafw00f':
        return '👁️';
      case 'nmap':
        return '💻';
      default:
        return '📄';
    }
  };

  return (
    <div className="p-6 lg:p-8 max-w-7xl mx-auto">
      {/* Header */}
      <div className="flex items-center justify-between mb-8">
        <div className="flex items-center space-x-3">
          <div className="p-2 bg-purple-500/20 rounded-lg">
            <BarChart3 className="w-6 h-6 text-purple-400" />
          </div>
          <div>
            <h1 className="text-3xl font-bold text-white">Reports</h1>
            <p className="text-gray-400">View stored scan results and generate reports</p>
          </div>
        </div>
        <button
          onClick={generateNewReport}
          className="flex items-center px-4 py-2 bg-primary hover:bg-primary/80 text-dark-900 rounded-lg font-medium transition-colors"
        >
          <Database className="w-4 h-4 mr-2" />
          Refresh Reports
        </button>
      </div>

      {/* Reports List */}
      <div className="bg-dark-800/50 rounded-xl border border-dark-700">
        <div className="p-4 border-b border-dark-700">
          <h3 className="text-lg font-semibold text-white">Stored Scan Results</h3>
          <p className="text-sm text-gray-400">Total: {reports.length} reports</p>
        </div>
        <div className="p-4">
          {loading ? (
            <div className="text-center py-12">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
              <p className="text-gray-500">Loading reports...</p>
            </div>
          ) : reports.length === 0 ? (
            <div className="text-center py-12">
              <BarChart3 className="w-12 h-12 text-gray-500 mx-auto mb-4" />
              <p className="text-gray-500 mb-4">No stored reports found</p>
              <p className="text-gray-400 text-sm">Run scans and use the "Store" button to save results here</p>
            </div>
          ) : (
            <div className="space-y-3">
              {reports.map((report) => (
                <div
                  key={report.id}
                  className="bg-dark-700/50 rounded-lg p-4 border border-dark-600 hover:border-dark-500 transition-colors"
                >
                  <div className="flex items-center justify-between">
                    <div className="flex-1">
                      <div className="flex items-center space-x-3 mb-2">
                        <span className="text-lg">{getModuleIcon(report.module)}</span>
                        <h4 className="font-semibold text-white">{report.title}</h4>
                        <span className={`text-sm ${getStatusColor(report.status)}`}>
                          {getStatusIcon(report.status)} {report.status}
                        </span>
                        {/* Always show 'Stored' badge, since all reports are stored */}
                        <span className="inline-flex items-center px-2 py-1 text-xs bg-green-500/20 text-green-400 rounded-full">
                          <Database className="w-3 h-3 mr-1" />
                          Stored
                        </span>
                      </div>
                      <div className="flex items-center space-x-4 text-sm text-gray-400">
                        <span className="flex items-center">
                          <FileText className="w-4 h-4 mr-1" />
                          {report.module}
                        </span>
                        <span className="flex items-center">
                          🎯 {report.target}
                        </span>
                        <span className="flex items-center">
                          <Calendar className="w-4 h-4 mr-1" />
                          {new Date(report.date).toLocaleDateString()}
                        </span>
                        <span className="flex items-center">
                          <Clock className="w-4 h-4 mr-1" />
                          {new Date(report.date).toLocaleTimeString()}
                        </span>
                      </div>
                    </div>
                    <div className="flex items-center space-x-2">
                      <button
                        onClick={() => viewReport(report)}
                        className="p-2 text-gray-400 hover:text-blue-400 transition-colors"
                        title="View report"
                      >
                        <Eye className="w-4 h-4" />
                      </button>
                      <button
                        onClick={() => downloadReport(report)}
                        className="p-2 text-gray-400 hover:text-gray-300 transition-colors"
                        title="Download report"
                      >
                        <Download className="w-4 h-4" />
                      </button>
                      <button
                        onClick={() => deleteReport(report.id)}
                        disabled={deleting === report.id}
                        className="p-2 text-gray-400 hover:text-red-400 transition-colors disabled:opacity-50"
                        title="Delete report"
                      >
                        {deleting === report.id ? (
                          <div className="w-4 h-4 border-2 border-red-400 border-t-transparent rounded-full animate-spin"></div>
                        ) : (
                          <Trash2 className="w-4 h-4" />
                        )}
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>

      {/* Report Statistics */}
      <div className="grid md:grid-cols-2 gap-6 mt-8">
        <div className="bg-dark-800/50 rounded-lg p-4 border border-dark-700">
          <h4 className="font-semibold text-white mb-2">Total Reports</h4>
          <p className="text-2xl font-bold text-primary">{reports.length}</p>
        </div>
        <div className="bg-dark-800/50 rounded-lg p-4 border border-dark-700">
          <h4 className="font-semibold text-white mb-2">Stored in DB</h4>
          <p className="text-2xl font-bold text-green-400">
            {reports.length}
          </p>
        </div>
      </div>

      {/* Report View Modal */}
      {showModal && selectedReport && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-dark-800 rounded-xl border border-dark-700 max-w-4xl w-full max-h-[80vh] overflow-hidden">
            <div className="p-6 border-b border-dark-700">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <span className="text-2xl">{getModuleIcon(selectedReport.module)}</span>
                  <div>
                    <h3 className="text-xl font-bold text-white">{selectedReport.title}</h3>
                    <p className="text-gray-400">{selectedReport.module} • {selectedReport.target}</p>
                  </div>
                </div>
                <button
                  onClick={closeModal}
                  className="p-2 text-gray-400 hover:text-white transition-colors"
                >
                  <X className="w-6 h-6" />
                </button>
              </div>
            </div>
            <div className="p-6 overflow-y-auto max-h-[60vh]">
              <div className="bg-dark-950 rounded-lg p-4">
                <pre className="text-green-400 font-mono text-sm whitespace-pre-wrap">
                  {selectedReport.content}
                </pre>
              </div>
            </div>
            <div className="p-6 border-t border-dark-700 flex justify-end space-x-3">
              <button
                onClick={() => downloadReport(selectedReport)}
                className="flex items-center px-4 py-2 bg-primary hover:bg-primary/80 text-dark-900 rounded-lg font-medium transition-colors"
              >
                <Download className="w-4 h-4 mr-2" />
                Download
              </button>
              <button
                onClick={closeModal}
                className="px-4 py-2 bg-dark-700 hover:bg-dark-600 text-gray-300 rounded-lg font-medium transition-colors"
              >
                Close
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Reports;
