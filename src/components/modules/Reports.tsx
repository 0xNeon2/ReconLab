import React, { useState, useEffect } from 'react';
import { BarChart3, Download, Eye, Trash2, FileText, Calendar, Clock } from 'lucide-react';

interface Report {
  id: string;
  name: string;
  type: string;
  date: string;
  size: string;
  status: 'completed' | 'generating' | 'failed';
}

const Reports: React.FC = () => {
  const [reports, setReports] = useState<Report[]>([]);
  const [hasNewReports, setHasNewReports] = useState(false);

  useEffect(() => {
    // Load reports from localStorage
    const savedReports = localStorage.getItem('reconlab_reports');
    if (savedReports) {
      try {
        const parsedReports = JSON.parse(savedReports);
        setReports(parsedReports);
        
        // Check for new reports (reports created in the last 5 minutes)
        const fiveMinutesAgo = Date.now() - (5 * 60 * 1000);
        const newReports = parsedReports.filter((report: Report) => 
          new Date(report.date).getTime() > fiveMinutesAgo
        );
        setHasNewReports(newReports.length > 0);
      } catch (error) {
        console.error('Error loading reports:', error);
      }
    } else {
      // Initialize with some sample reports
      initializeSampleReports();
    }
  }, []);

  const initializeSampleReports = () => {
    const sampleReports: Report[] = [
      {
        id: '1',
        name: 'Subdomain Enumeration - example.com',
        type: 'Subdomain Scan',
        date: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(), // 2 hours ago
        size: '2.3 KB',
        status: 'completed'
      },
      {
        id: '2',
        name: 'Nmap Aggressive Scan - 192.168.1.1',
        type: 'Network Scan',
        date: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(), // 4 hours ago
        size: '15.7 KB',
        status: 'completed'
      },
      {
        id: '3',
        name: 'Endpoint Discovery - testsite.com',
        type: 'Directory Scan',
        date: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(), // 1 day ago
        size: '8.9 KB',
        status: 'completed'
      },
      {
        id: '4',
        name: 'Vulnerability Assessment - target.com',
        type: 'Vulnerability Scan',
        date: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(), // 2 days ago
        size: '45.2 KB',
        status: 'completed'
      }
    ];
    
    setReports(sampleReports);
    localStorage.setItem('reconlab_reports', JSON.stringify(sampleReports));
  };

  const generateNewReport = () => {
    const newReport: Report = {
      id: Date.now().toString(),
      name: `Security Assessment - ${new Date().toLocaleDateString()}`,
      type: 'Comprehensive Scan',
      date: new Date().toISOString(),
      size: '0 KB',
      status: 'generating'
    };

    const updatedReports = [newReport, ...reports];
    setReports(updatedReports);
    localStorage.setItem('reconlab_reports', JSON.stringify(updatedReports));
    setHasNewReports(true);

    // Simulate report generation
    setTimeout(() => {
      const completedReport = {
        ...newReport,
        status: 'completed' as const,
        size: `${Math.floor(Math.random() * 50 + 10)}.${Math.floor(Math.random() * 9)} KB`
      };
      
      const finalReports = updatedReports.map(r => 
        r.id === newReport.id ? completedReport : r
      );
      
      setReports(finalReports);
      localStorage.setItem('reconlab_reports', JSON.stringify(finalReports));
    }, 3000);
  };

  const downloadReport = (report: Report) => {
    // Simulate report download
    const reportContent = `ReconLab Security Report
Report: ${report.name}
Type: ${report.type}
Generated: ${new Date(report.date).toLocaleString()}
Status: ${report.status}

=== EXECUTIVE SUMMARY ===
This report contains the results of security testing performed on the target system.

=== FINDINGS ===
1. Subdomain Enumeration Results
   - Found 15 subdomains
   - 3 subdomains appear to be development/staging environments

2. Port Scan Results
   - 22/tcp open ssh
   - 80/tcp open http
   - 443/tcp open https

3. Vulnerability Assessment
   - No critical vulnerabilities found
   - 2 medium-risk findings identified
   - 5 low-risk findings identified

=== RECOMMENDATIONS ===
1. Secure development/staging environments
2. Implement proper access controls
3. Regular security assessments

=== TECHNICAL DETAILS ===
[Detailed technical findings would be included here]

Report generated by ReconLab v1.0
`;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${report.name.replace(/[^a-zA-Z0-9]/g, '_')}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const deleteReport = (id: string) => {
    if (confirm('Are you sure you want to delete this report?')) {
      const updatedReports = reports.filter(report => report.id !== id);
      setReports(updatedReports);
      localStorage.setItem('reconlab_reports', JSON.stringify(updatedReports));
    }
  };

  const clearNewReportIndicator = () => {
    setHasNewReports(false);
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed':
        return 'text-green-400';
      case 'generating':
        return 'text-yellow-400';
      case 'failed':
        return 'text-red-400';
      default:
        return 'text-gray-400';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'completed':
        return '✓';
      case 'generating':
        return '⏳';
      case 'failed':
        return '✗';
      default:
        return '?';
    }
  };

  return (
    <div className="p-6 lg:p-8 max-w-7xl mx-auto">
      {/* Header */}
      <div className="flex items-center justify-between mb-8">
        <div className="flex items-center space-x-3">
          <div className="p-2 bg-purple-500/20 rounded-lg relative">
            <BarChart3 className="w-6 h-6 text-purple-400" />
            {hasNewReports && (
              <div className="absolute -top-1 -right-1 w-3 h-3 bg-primary rounded-full animate-pulse" />
            )}
          </div>
          <div>
            <h1 className="text-3xl font-bold text-white">Reports</h1>
            <p className="text-gray-400">View and download your security assessment reports</p>
          </div>
        </div>
        <button
          onClick={generateNewReport}
          className="flex items-center px-4 py-2 bg-primary hover:bg-primary/80 text-dark-900 rounded-lg font-medium transition-colors"
        >
          <FileText className="w-4 h-4 mr-2" />
          Generate Report
        </button>
      </div>

      {/* New Reports Alert */}
      {hasNewReports && (
        <div className="bg-primary/10 border border-primary/20 rounded-lg p-4 mb-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="w-2 h-2 bg-primary rounded-full animate-pulse" />
              <span className="text-primary font-medium">New reports available!</span>
            </div>
            <button
              onClick={clearNewReportIndicator}
              className="text-sm text-primary hover:text-primary/80 transition-colors"
            >
              Mark as seen
            </button>
          </div>
        </div>
      )}

      {/* Reports List */}
      <div className="bg-dark-800/50 rounded-xl border border-dark-700">
        <div className="p-4 border-b border-dark-700">
          <h3 className="text-lg font-semibold text-white">Generated Reports</h3>
          <p className="text-sm text-gray-400">Total: {reports.length} reports</p>
        </div>
        <div className="p-4">
          {reports.length === 0 ? (
            <div className="text-center py-12">
              <BarChart3 className="w-12 h-12 text-gray-500 mx-auto mb-4" />
              <p className="text-gray-500 mb-4">No reports generated yet</p>
              <button
                onClick={generateNewReport}
                className="px-4 py-2 bg-primary hover:bg-primary/80 text-dark-900 rounded-lg font-medium transition-colors"
              >
                Generate Your First Report
              </button>
            </div>
          ) : (
            <div className="space-y-3">
              {reports.map((report) => (
                <div
                  key={report.id}
                  className="bg-dark-700/50 rounded-lg p-4 border border-dark-600 hover:border-dark-500 transition-colors"
                >
                  <div className="flex items-center justify-between">
                    <div className="flex-1">
                      <div className="flex items-center space-x-3 mb-2">
                        <h4 className="font-semibold text-white">{report.name}</h4>
                        <span className={`text-sm ${getStatusColor(report.status)}`}>
                          {getStatusIcon(report.status)} {report.status}
                        </span>
                      </div>
                      <div className="flex items-center space-x-4 text-sm text-gray-400">
                        <span className="flex items-center">
                          <FileText className="w-4 h-4 mr-1" />
                          {report.type}
                        </span>
                        <span className="flex items-center">
                          <Calendar className="w-4 h-4 mr-1" />
                          {new Date(report.date).toLocaleDateString()}
                        </span>
                        <span className="flex items-center">
                          <Clock className="w-4 h-4 mr-1" />
                          {new Date(report.date).toLocaleTimeString()}
                        </span>
                        <span>{report.size}</span>
                      </div>
                    </div>
                    <div className="flex items-center space-x-2">
                      <button
                        onClick={() => downloadReport(report)}
                        disabled={report.status !== 'completed'}
                        className="p-2 text-gray-400 hover:text-gray-300 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                        title="Download report"
                      >
                        <Download className="w-4 h-4" />
                      </button>
                      <button
                        onClick={() => deleteReport(report.id)}
                        className="p-2 text-gray-400 hover:text-red-400 transition-colors"
                        title="Delete report"
                      >
                        <Trash2 className="w-4 h-4" />
                      </button>
                    </div>
                  </div>
                  {report.status === 'generating' && (
                    <div className="mt-3">
                      <div className="w-full bg-dark-600 rounded-full h-2">
                        <div className="bg-primary h-2 rounded-full animate-pulse" style={{ width: '60%' }} />
                      </div>
                      <p className="text-xs text-gray-400 mt-1">Generating report...</p>
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>
      </div>

      {/* Report Statistics */}
      <div className="grid md:grid-cols-3 gap-6 mt-8">
        <div className="bg-dark-800/50 rounded-lg p-4 border border-dark-700">
          <h4 className="font-semibold text-white mb-2">Total Reports</h4>
          <p className="text-2xl font-bold text-primary">{reports.length}</p>
        </div>
        <div className="bg-dark-800/50 rounded-lg p-4 border border-dark-700">
          <h4 className="font-semibold text-white mb-2">Completed</h4>
          <p className="text-2xl font-bold text-green-400">
            {reports.filter(r => r.status === 'completed').length}
          </p>
        </div>
        <div className="bg-dark-800/50 rounded-lg p-4 border border-dark-700">
          <h4 className="font-semibold text-white mb-2">In Progress</h4>
          <p className="text-2xl font-bold text-yellow-400">
            {reports.filter(r => r.status === 'generating').length}
          </p>
        </div>
      </div>
    </div>
  );
};

export default Reports;