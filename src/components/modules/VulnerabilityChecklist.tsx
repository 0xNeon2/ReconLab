import React, { useState, useEffect } from 'react';
import { CheckSquare, Plus, Trash2, Check } from 'lucide-react';

interface ChecklistItem {
  id: string;
  text: string;
  completed: boolean;
  isCustom: boolean;
}

const VulnerabilityChecklist: React.FC = () => {
  const [checklist, setChecklist] = useState<ChecklistItem[]>([]);
  const [newItem, setNewItem] = useState('');

  const defaultItems = [
    'Subdomain enumeration completed',
    'Port scanning performed',
    'Service version detection',
    'Directory/endpoint discovery',
    'Parameter discovery',
    'CMS identification and scanning',
    'Firewall detection',
    'SSL/TLS configuration check',
    'HTTP security headers analysis',
    'Authentication bypass attempts',
    'SQL injection testing',
    'XSS vulnerability testing',
    'CSRF vulnerability testing',
    'File upload vulnerability testing',
    'Directory traversal testing',
    'Open redirect testing',
    'Subdomain takeover testing',
    'CORS misconfiguration testing',
    'Information disclosure testing',
    'Business logic flaw testing',
    'Rate limiting bypass testing',
    'Session management testing',
    'Password policy testing',
    'Privilege escalation testing',
    'Documentation and reporting'
  ];

  useEffect(() => {
    // Load checklist from localStorage or initialize with defaults
    const saved = localStorage.getItem('reconlab_checklist');
    if (saved) {
      try {
        setChecklist(JSON.parse(saved));
      } catch (error) {
        console.error('Error loading checklist:', error);
        initializeDefaultChecklist();
      }
    } else {
      initializeDefaultChecklist();
    }
  }, []);

  const initializeDefaultChecklist = () => {
    const defaultChecklist = defaultItems.map((item, index) => ({
      id: `default_${index}`,
      text: item,
      completed: false,
      isCustom: false
    }));
    setChecklist(defaultChecklist);
    localStorage.setItem('reconlab_checklist', JSON.stringify(defaultChecklist));
  };

  const saveChecklist = (updatedChecklist: ChecklistItem[]) => {
    setChecklist(updatedChecklist);
    localStorage.setItem('reconlab_checklist', JSON.stringify(updatedChecklist));
  };

  const toggleItem = (id: string) => {
    const updatedChecklist = checklist.map(item =>
      item.id === id ? { ...item, completed: !item.completed } : item
    );
    saveChecklist(updatedChecklist);
  };

  const addCustomItem = () => {
    if (!newItem.trim()) return;

    const customItem: ChecklistItem = {
      id: `custom_${Date.now()}`,
      text: newItem.trim(),
      completed: false,
      isCustom: true
    };

    const updatedChecklist = [...checklist, customItem];
    saveChecklist(updatedChecklist);
    setNewItem('');
  };

  const deleteCustomItem = (id: string) => {
    if (confirm('Are you sure you want to delete this item?')) {
      const updatedChecklist = checklist.filter(item => item.id !== id);
      saveChecklist(updatedChecklist);
    }
  };

  const resetChecklist = () => {
    if (confirm('Are you sure you want to reset the entire checklist? This will remove all custom items and uncheck all items.')) {
      initializeDefaultChecklist();
    }
  };

  const completedCount = checklist.filter(item => item.completed).length;
  const totalCount = checklist.length;
  const progressPercentage = totalCount > 0 ? (completedCount / totalCount) * 100 : 0;

  return (
    <div className="p-6 lg:p-8 max-w-4xl mx-auto">
      {/* Header */}
      <div className="flex items-center space-x-3 mb-8">
        <div className="p-2 bg-green-500/20 rounded-lg">
          <CheckSquare className="w-6 h-6 text-green-400" />
        </div>
        <div>
          <h1 className="text-3xl font-bold text-white">Vulnerability Checklist</h1>
          <p className="text-gray-400">Track your security testing progress</p>
        </div>
      </div>

      {/* Progress Bar */}
      <div className="bg-dark-800/50 rounded-xl p-6 border border-dark-700 mb-6">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-semibold text-white">Progress</h3>
          <span className="text-sm text-gray-400">
            {completedCount} of {totalCount} completed ({Math.round(progressPercentage)}%)
          </span>
        </div>
        <div className="w-full bg-dark-700 rounded-full h-3">
          <div 
            className="bg-gradient-to-r from-primary to-secondary h-3 rounded-full transition-all duration-300"
            style={{ width: `${progressPercentage}%` }}
          />
        </div>
      </div>

      {/* Add Custom Item */}
      <div className="bg-dark-800/50 rounded-xl p-6 border border-dark-700 mb-6">
        <h3 className="text-lg font-semibold text-white mb-4">Add Custom Item</h3>
        <div className="flex space-x-3">
          <input
            type="text"
            value={newItem}
            onChange={(e) => setNewItem(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && addCustomItem()}
            placeholder="Enter custom checklist item..."
            className="flex-1 px-3 py-2 bg-dark-700 border border-dark-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
          />
          <button
            onClick={addCustomItem}
            className="flex items-center px-4 py-2 bg-primary hover:bg-primary/80 text-dark-900 rounded-lg font-medium transition-colors"
          >
            <Plus className="w-4 h-4 mr-2" />
            Add
          </button>
        </div>
      </div>

      {/* Checklist */}
      <div className="bg-dark-800/50 rounded-xl border border-dark-700">
        <div className="p-4 border-b border-dark-700 flex items-center justify-between">
          <h3 className="text-lg font-semibold text-white">Security Testing Checklist</h3>
          <button
            onClick={resetChecklist}
            className="text-sm text-gray-400 hover:text-red-400 transition-colors"
          >
            Reset All
          </button>
        </div>
        <div className="p-4">
          <div className="space-y-3 max-h-96 overflow-y-auto">
            {checklist.map((item) => (
              <div
                key={item.id}
                className={`flex items-center space-x-3 p-3 rounded-lg border transition-all duration-200 ${
                  item.completed
                    ? 'bg-green-500/10 border-green-500/30'
                    : 'bg-dark-700/50 border-dark-600 hover:border-dark-500'
                }`}
              >
                <button
                  onClick={() => toggleItem(item.id)}
                  className={`flex items-center justify-center w-5 h-5 rounded border-2 transition-all duration-200 ${
                    item.completed
                      ? 'bg-green-500 border-green-500'
                      : 'border-gray-400 hover:border-primary'
                  }`}
                >
                  {item.completed && <Check className="w-3 h-3 text-white" />}
                </button>
                <span
                  className={`flex-1 transition-all duration-200 ${
                    item.completed
                      ? 'text-green-400 line-through'
                      : 'text-white'
                  }`}
                >
                  {item.text}
                </span>
                {item.isCustom && (
                  <button
                    onClick={() => deleteCustomItem(item.id)}
                    className="p-1 text-gray-400 hover:text-red-400 transition-colors"
                    title="Delete custom item"
                  >
                    <Trash2 className="w-4 h-4" />
                  </button>
                )}
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Tips */}
      <div className="mt-6 bg-gradient-to-r from-green-500/10 to-emerald-500/10 rounded-lg p-4 border border-green-500/20">
        <h4 className="font-semibold text-white mb-2">Tips</h4>
        <ul className="space-y-1 text-sm text-gray-300">
          <li>• Check off items as you complete each security test</li>
          <li>• Add custom items specific to your target or methodology</li>
          <li>• Use this checklist to ensure comprehensive coverage</li>
          <li>• Progress is automatically saved and persists between sessions</li>
        </ul>
      </div>
    </div>
  );
};

export default VulnerabilityChecklist;